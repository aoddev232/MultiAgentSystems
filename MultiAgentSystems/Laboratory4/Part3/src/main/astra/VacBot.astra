agent VacBot {
    module EIS ei;
    module Console C;
    module Routing routing;
    module Math math;
    module System S;

    types vacbot {
        formula route(list);
    }

    rule +!update() : ei.location(long current_x, long current_y) & ei.direction(string direction) {
        long maximum_x=routing.maxX();
        long maximum_y=routing.maxY();
        foreach(ei.location(long X, long Y)) {
            if ((X+1)>maximum_x) {
                maximum_x = X+1;
            }
            if ((Y+1)>maximum_y) {
                maximum_y = Y+1;
            }
        }
        routing.updateBoundary(maximum_x, maximum_y);


        foreach(ei.square(string location, "obstacle") & ~routing.obstacle(current_x, current_y, direction, location)) {
            routing.recordObstacle(current_x, current_y, direction, location);
        }

        string stringRedundantVal = "1";
        long redundantVal = math.longValue(stringRedundantVal);
        list L = routing.routeTo(current_x, current_y, redundantVal, redundantVal);
        -+route(L);
        C.println("L=" + L);
    }

    rule +$ei.event(location(long X, long Y)) {
        !update();
        !task(string action);
    }

    rule +!task(string action) : ei.square("here", "dust") {
        ei.clean();
        !task(action);
    }

    rule +!task(string action) : ei.square("forward", "dust") {
        ei.move("forward");
        action = "move";
    }

    rule +!task(string action) : ei.square("left", "dust") {
        ei.move("left");
        action = "move";
    }

    rule +!task(string action) : ei.square("right", "dust") {
        ei.move("right");
        action = "move";
    }


    rule +!task(string action) : route([funct move]) {
        -route([move]);
        !go(move, action);
    }

    rule +!task(string action) : route([funct move | list L]) {
        -+route(L);
        !go(move, action);
    }

    rule +!go(move(string direction), string action){
        try {
            ei.move(direction);
            action = direction; 
        } recover {
            S.sleep(1000);
            !go(move(direction), action);
        }
    }

    rule +!main([string vacbot]) {
        ei.join("hw");
        ei.link(vacbot);
        C.println("VacBot activated");
    }
}